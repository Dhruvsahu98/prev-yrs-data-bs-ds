A. ✅ DFS can be used to detect cycles in the graph.

B. ✅ DFS can be used to identify connected components in an undirected graph.

C. ✅ Using an adjacency list instead of an adjacency matrix can improve the worst case complexity to $O(V + E)$, where V is number of vertices and E is number of edges.

D. ❌ DFS can be used to identify the shortest path from $s$ (if DFS starting from a vertex $s$) to every other vertex in the graph, in terms of number of edges.

E. ✅ DFS always produces the same number of tree edges irrespective of the order in which the vertices are considered for DFS.

**Question Number : 17 Question Type : MSQ**

**Correct Marks : 4**

**Question Label : Multiple Select Question**

Consider the following graph

```python
# graph representation
graph = {
    0: [1, 2],
    1: [0, 2, 3, 4],
    2: [0, 1, 5],
    3: [1, 4],
    4: [1, 3, 5],
    5: [2, 4]
}
```

\begin{tikzpicture}[scale=1.5]
\node[draw,circle] (0) at (0,1) {0};
\node[draw,circle] (1) at (-1,0) {1};
\node[draw,circle] (2) at (1,0) {2};
\node[draw,circle] (3) at (-1,-1) {3};
\node[draw,circle] (4) at (0,-1) {4};
\node[draw,circle] (5) at (1,-1) {5};

\draw (0) -- (1);
\draw (0) -- (2);
\draw (1) -- (2);
\draw (1) -- (3);
\draw (1) -- (4);
\draw (2) -- (5);
\draw (3) -- (4);
\draw (4) -- (5);
\end{tikzpicture}

A Depth First Search (DFS) is started at node 0. The nodes are listed in the order they are first visited. Which of the following is (are) possible output(s)?

**Options :**

A. ❌ 0 1 2 3 5 4