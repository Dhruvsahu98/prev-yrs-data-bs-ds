A. $\times$ $O(nlogn)$
B. $\checkmark$ $O(n^2logn)$
C. $\times$ $O(n^2)$
D. $\times$ $O(logn)$

**Question Number : 4 Question Type : MCQ**

**Correct Marks : 3**

**Question Label : Multiple Choice Question**

```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
```

A queue is implemented using a linked list. Each node of the linked list is an object of class Node. The queue has a head pointer that points to the first node of the linked list and a tail pointer that points to the last element of the linked list, as shown in the figure.

\begin{tikzpicture}
\draw (0,0) rectangle (1,1);
\draw (0.5,0.5) -- (0.5,1);
\draw (1,0.5) -- (2,0.5);
\draw[dotted] (2,0.5) -- (3,0.5);
\draw (3,0.5) -- (4,0.5);
\draw (4,0) rectangle (5,1);
\draw (4.5,0.5) -- (4.5,1);
\draw (5,0.5) -- (5.5,0.5);
\draw (5.5,0.25) -- (5.5,0.75);
\draw (5.5,0.25) -- (5.75,0.25);
\draw (5.5,0.75) -- (5.75,0.75);
\node at (0.5,0) {$head$};
\node at (4.5,0) {$tail$};
\draw[->] (0.5,-0.5) -- (0.5,-1);
\draw[->] (4.5,-0.5) -- (4.5,-1);
\end{tikzpicture}

Let n denote the number of nodes in the queue. Let Enqueue be implemented by inserting a new node at the tail, and Dequeue be implemented by deletion of a node from the head. Which one of the following is the time complexity of the most time-efficient implementation of Enqueue and Dequeue, respectively, for this data structure?

**Options :**

A. $\checkmark$ $O(1), O(1)$
B. $\times$ $O(1), O(n)$